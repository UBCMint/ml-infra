name: Create Release on Successful Builds

on:
  push:
    branches:
      - main
    tags:
      - 'v*' # Trigger on version tags
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Detect package manager
      #   id: detect-package-manager
      #   run: |
      #     if [ -f "${{ github.workspace }}/yarn.lock" ]; then
      #       echo "manager=yarn" >> $GITHUB_OUTPUT
      #       echo "command=install" >> $GITHUB_OUTPUT
      #       echo "runner=yarn" >> $GITHUB_OUTPUT
      #       exit 0
      #     elif [ -f "${{ github.workspace }}/package.json" ]; then
      #       echo "manager=npm" >> $GITHUB_OUTPUT
      #       echo "command=ci" >> $GITHUB_OUTPUT
      #       echo "runner=npx --no-install" >> $GITHUB_OUTPUT
      #       exit 0
      #     else
      #       echo "Unable to determine package manager"
      #       exit 1
      #     fi

      - name: Setup Node
        # uses: actions/setup-node@v4
        # with:
        #   node-version: "20"
        #   cache: ${{ steps.detect-package-manager.outputs.manager }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        # run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        # working-directory: ./nextjs-app
        # run: npm install
        run: echo "Installing Next.js dependencies..."

      - name: Lint Next.js Code
        # working-directory: ./nextjs-app
        # run: npm run lint
        run: echo "Linting Next.js app..."

      - name: Run Tests for Next.js
        # working-directory: ./nextjs-app
        # run: npm test
        run: echo "Running Next.js tests..."

      - name: Build with Next.js
        # run: ${{ steps.detect-package-manager.outputs.runner }} next build
        # working-directory: ./nextjs-app
        # run: npm run build
        run: echo "Building Next.js app..."

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install dependencies for Tauri
        working-directory: ./tauri-monitoring
        run: npm install
        # run: echo "Installing Tauri dependencies..."

      - name: Update Cargo Dependencies
        working-directory: ./tauri-monitoring
        run: cargo update

      - name: Install System Dependencies
        working-directory: ./tauri-monitoring
        run: |
          sudo apt update
          sudo apt install -y libglib2.0-dev libgtk-3-dev libgobject-2.0-dev libgio2.0-cil-dev pkg-config

      - name: check PKG_CONFIG_PATH manually
        working-directory: ./tauri-monitoring
        run: pkg-config --modversion glib-2.0
  
      - name: Test Tauri app
        working-directory: ./tauri-monitoring
        # run: npm test
        run: echo "Running Tauri tests..."

      - name: Build Tauri app
        working-directory: ./tauri-monitoring
        # run: cargo build --release
        run: npm run tauri build
        # run: echo "Building Tauri app..."
  
  release:
    name: create release
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "Release ${{ github.ref_name }}"
          body: "Automated release for commit ${{ github.ref_name }}."
          draft: false
          prerelease: false

      - name: Upload Tauri Binaries (for Windows, macOS, Linux)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tauri-monitoring/target/release/bundle/*.app
          asset_name: TauriApp-${{ github.sha }}.zip
          asset_content_type: application/zip
